# -*- mode: ruby -*-
#
# Sample configuration for ip_lockout -- a part of ip_lockout
#
# Time-stamp: <2017-07-26 22:23:45 zophos>
#

########################################################################
#
# System Configurations
#

#
# path to iptables
#
IPTABLES='/sbin/iptables'

#
# iptables target for blocking operation
#
IPTABLES_TARGET='REJECT'

#
# Commnad line options to read existing iptables entries
#
IPTABLES_LIST_OPTIONS='-L INPUT -n'

#
# Hook for iptalbes entries. See section Inspector for details.
#
IPTABLES_ENTRY_HOOK=[
    /^#{IPTABLES_TARGET}\s+[a-zA-Z0-9]+\s+--\s+(\d{,3}\.\d{,3}\.\d{,3}\.\d{,3}(\/\d+)?)/,
    Proc.new{|line,match|
        match[1]
    }
]

#
# Building command line procedure to updating iptables entries
#
# op: 'I' insert or 'D' delete record (String)
# addr: host or subnet address (String)
#
IPTABLES_WRITE_FORMAT_PROC=Proc.new{|op,addr|
    "#{IPTABLES} -%s INPUT -s %s -j #{IPTABLES_TARGET}"%[op,addr]
}

#
# If IPTABLES_REPORT_ACTIION=true, each iptables action (insert/delete)
# will be reported to STDERR.
# It's useful for cron mail.
#
#IPTABLES_REPORT_ACTIION=true


#
# path to store lockout.db. It will be rewrite always.
#
DB='/var/lib/ip_lockout/lockout.db'



########################################################################
#
# Inspecting Configurations
#

#
# inspecting duration in logfile (sec)
#
# count break-in attemption during from before INSPECT_SPAN to now
#
INSPECT_SPAN= 86400 # 24h

#
# minimum blocking duration (sec)
#
# Actual blocking duration are defined as;
#   (num_detected_attemptions / NUM_THRESHOLD ) * LOCKOUT_SPAN
#
LOCKOUT_SPAN= 28800 # 8h

#
# start blocking threshold that
# number of detected attemptions while INSPECT_SPAN
#
# When detected attemtions those have record of blocking expired
# while INSPECT_SPAN, half of NUM_THRESHOLD is applied.
#
NUM_THRESHOLD=8

#
# host to subnet aggregation mask (CIDR subnetmask, 0 - 32)
#
# When multi host on same subnet ware detected, those entry are
# aggregated to one subnet entry to reduce iptables entry.
#
# e,g)
#  hosts: 192.168.0.1, 192.168.0.2, 192.168.0.123, 192.168.1.1
#
#  AGGREGATE_MASK=29:
#          (192.168.0.1, 192.168.0.2)
#                                     -> 192.168.0.0/29
#  AGGREGATE_MASK=24:
#          (192.168.0.1, 192.168.0.2, 192.168.0.123)
#                                     -> 192.168.0.0/24
#  AGGREGATE_MASK=16:
#          (192.168.0.1, 192.168.0.2, 192.168.0.123, 192.168.1.1)
#                                     -> 192.168.0.0/16
#
#
# If AGGREGATE_MASK set to 0, ALL HOSTS IN THE WORLD WILL BE BLOCKED.
#
#
#AGGREGATE_MASK=24

#
# igore host/subnet list (Array)
#
WHITE_LIST=[
    '127.0.0.1',      # localhost
    '127.0.0.0/8',    # localnet
#   '192.168.0.0/24'  # Private net
]



########################################################################
#
# Inspector for each log
#  {
#      log_file_name=>{
#          tag=>[
#              inspect pattern (Regexp),
#              IP address extract procedure (Proc with 2 args)
#          ],
#      }
#  }
#
# IP address extract procedure will be called with following two args;
# those are
#    line:  whole a line that matched inspect pattern
#    match: MatchData of inspect pattern
#
AUTH_LOG='/var/log/auth.log'
MAIL_LOG='/var/log/mail.log'

INSPECTOR={
    #
    # detection that break-in attempt to sshd
    #
    AUTH_LOG =>{
        :ssh =>[
            /sshd\[\d+\]: Invalid user [a-z_][a-z0-9_]{0,30}\s+from\s+(\d{,3}\.\d{,3}\.\d{,3}\.\d{,3})/,
            Proc.new{|line,match|
                match[1]
            }
        ]
    },

    #
    # detection that break-in attemp to Postfix SMTP-AUTH and dovecot
    #
    MAIL_LOG =>{
        :smtp_auth =>[
            /\[(\d{,3}\.\d{,3}\.\d{,3}\.\d{,3})\]: SASL LOGIN authentication failed/,
            Proc.new{|line,match|
                match[1]
            }
        ],
        :imap =>[
            /imap-login: Disconnected \(no auth attempts/,
            Proc.new{|line,match|
                m=line.match(/rip=(\d{,3}\.\d{,3}\.\d{,3}\.\d{,3})/)
                m[1] if m
            }
        ]
    },

    #
    # This entry will be used in filter mode
    #
    STDIN=>{
        #
        # The tag ':__SYSTEM__' is reserved for system firewall record.
        #
        :__SYSTEM__ =>IPTABLES_ENTRY_HOOK
        #
        # other entry for each log-file will be merged here at filter mode
        #
    }
}


########################################################################
#
# When set FILTER_MODE = true, run always filter mode.
#
# Filter mode does NOT require root privelege.
#
#FILTER_MODE=true

#
# Filter mode output formatter
#
# op: String; 'I' trig up blocking | 'D' trig down blocking
# rec: Blocker::Entry
#    addr: IPAddr; Target host/subnet's IP address
#    status: Symbol; Current status in DB; :blocked, :expired, :force_expired
#    count: Integer; Detected attemption count at blocking start
#    remain: Integer; Remain count number until expire
#    last: Time; Timestamp of last attemption detected
# updated: Time; Timestamp of last updated of this DB entry
#
#
# rec.addr has two original methods those are;
#    cidr_mask: Integer; subnet mask
#    to_s_with_mask(always_with_mask=nil): String;
#        IP address with mask.
#        When always_with_mask is true, /32 (IPv4) or /128 (IPv6) was shown.
#
#
FILTER_OUTPUT=Proc.new{|op,rec,updated|
    [
        "[#{updated}]",
        op,
        rec.addr.to_s_with_mask,
        rec.status,
        "#{rec.remain}/#{rec.count}",
        rec.last.to_s
    ].join(' ')
}
