#!/usr/bin/ruby
#
# ip_lockout
#   -- Script for detecting break-in attemption and automatic blocking
#
# https://github.com/zophos/ip_lockout
#
# Time-stamp: <2017-07-26 07:34:42 zophos>
#
# Copyright (c) 2017, NISHI Takao <zophos@koka-in.org>
# All rights reserved.
#
# THIS SOFTWARE COMES WITH ABSOLUTELY NO WARRANTY.
#
# You can redistribute it and/or modify it under either the terms of
# the 2-clause BSDL.
#
#
require 'time'
require 'ipaddr'


########################################################################
#
# parse command line options
#

filter_mode=nil
show_status=nil
dry_run=nil
ignore_db=nil
ignore_iptables_entry=nil

config_file=nil

now=Time.now

while(opt=ARGV.shift)
    case opt
    when '-h', '--help'
        $stderr<< <<_EOS_
#{File.basename($0)}
Detect break-in attemption and block them using iptables

USAGE:
  -c [file], --config-file=[file]:
          run with specified config file
  -F, --filter-mode: read data from STDIN and write results to STDOUT
  -S, --show-status: Show current status

  -d, --dry-run: don't update db and iptables entry

  --ignore-db-entry: don't read existing lockout.db
  --ignore-iptables-entry: don't read existing iptables entries

  --now="timestamp": force set now as gaven timestamp

  -h, --help: show this message and quit

_EOS_
        exit
    when '-c'
        config_file=ARGV.shift
    when /^--conf/
        config_file=opt.split('=',2)[1]
    when '-F', /^--filter/
        filter_mode=true
    when '-S', /^--show/
        show_status=true
    when '-d', /^--dry/
        dry_run=true
    when /^--ignore-db/
        ignore_db=true
    when /^--ignore-ip/
        ignore_iptables_entry=true
    when /^--now/
        now=Time.parse(opt.split('=',2)[1])
    end
end


#
# some short-cuts
#
case File.basename($0)
when /^check-/
    # commnd name start with 'check-', assume as short-cut for --dry-run
    show_status=true
when /^filter-/
    filter_mode=true
end


########################################################################
#
# load configration file
#
CONFIG_PATH=[
    ".ip_lockoutrc",
    "#{ENV['HOME']}/.ip_lockoutrc",
    "/usr/local/etc/ip_lockout/ip_lockout.rc",
    "/usr/local/etc/ip_lockout.rc",
    "/etc/ip_lockout/ip_lockout.rc",
    "/etc/ip_lockout.rc"
]

config_path=if(config_file)
                [config_file]
            else
                CONFIG_PATH
            end

config_path.each{|rc|
    if(File.exist?(rc))
        $stderr<< "Configurate with \"#{rc}\"\n\n" if dry_run
        load rc
        break
    end
}

filter_mode=true if defined?(FILTER_MODE) && FILTER_MODE
ignore_iptables_entry=true if filter_mode

dry_run=true if show_status


########################################################################
#
# set default values
#
IPTABLES='/sbin/iptables' unless defined?(IPTABLES)
IPTABLES_TARGET='REJECT' unless defined?(IPTABLES_TARGET)
IPTABLES_PROT='all' unless defined?(IPTABLES_PROT)

# REPORT_IPTABLES_ACTIION=true

DB='/var/lib/ip_lockout/lockout.db' unless defined?(DB)


INSPECT_SPAN= 86400 unless defined?(INSPECT_SPAN)
LOCKOUT_SPAN= 28800 unless defined?(LOCKOUT_SPAN)

NUM_THRESHOLD=8 unless defined?(NUM_THRESHOLD)

AGGREGATE_MASK=24 unless defined?(AGGREGATE_MASK)
REAGGREGATE_THRESHOLD=1.25 unless defined?(REAGGREGATE_THRESHOLD)


WHITE_LIST=[] unless defined?(WHITE_LIST)

WHITE_LIST.map!{|a|
    IPAddr.new(a)
}

INSPECTOR={} unless defined?(INSPECTOR)

raise 'No inspector is defined' if INSPECTOR.empty?

FILTER_OUTPUT=Proc.new{|op,rec,ts|
    [
        ts.to_s,
        op,
        rec.addr.to_s_with_mask,
        rec.status,
        "#{rec.remain}/#{rec.count}",
        rec.last.to_s
    ].join(' ')
} unless defined?(FILTER_OUTPUT)



########################################################################
#
# monkey-patch for CIDR mask
#
# from https://stackoverflow.com/questions/41604782/ruby-ipaddr-find-address-mask
#
class IPAddr
    def cidr_mask
        case (@family)
        when Socket::AF_INET
            32-Math.log2((1<<32)-@mask_addr).to_i #

        when Socket::AF_INET6
            128-Math.log2((1<<128)-@mask_addr).to_i #

        else
            raise AddressFamilyError, "unsupported address family"
        end
    end

    def to_s_with_mask(always_with_mask=nil)
        mask=self.cidr_mask
        if(always_with_mask ||
           (@family==Socket::AF_INET && mask<32) ||
           (@family==Socket::AF_INET6 && mask<128))
            "#{self.to_s}/#{self.cidr_mask}"
        else
            self.to_s
        end
    end
end


########################################################################
#
# Log inspection and blocking
#
class Blocker
    class Countor
        #
        # Countor item for each IP address
        #
        class Host
            TIME_ORIGIN=Time.at(0)

            def initialize(addr,last=TIME_ORIGIN,count=0)
                @addr=addr
                @last=last
                @count=count
                @tags=[]
            end
            attr_reader :addr,:last,:count,:tags

            def count_up(last,count=1)
                @last=last if @last<last
                @count+=count
            end

            def add_tag(tag)
                @tags.push(tag)
                @tags.uniq!
                @tags.compact!
            end

            def select
                yield(self)
            end

            def descript(port=$stdout)
                bullet=if(@count>=NUM_THRESHOLD)
                           '> '
                       else
                           '  '
                       end
                port<< "#{bullet}#{@addr.to_s_with_mask}: "<<
                    "#{@last.to_s} (#{@count} #{@tags.inspect})\n"
            end
        end
        #
        # end of Blocker::Countor::Host
        #

        #
        # Aggregated item for each subnet
        #
        class Subnet<Host
            def initialize(host,mask)
                super(host.addr.mask(mask))
                @mask=mask
                @hosts=[]
            end
            attr_reader :mask,:hosts

            def add_host(host)
                return nil unless @addr.include?(host.addr)

                @hosts.push(host)
                self.count_up(host.last,host.count)

                @tags+=host.tags
                @tags.sort!
                @tags.uniq!
                @tags.compact!

                self
            end
            def remove_host(host)
                return nil unless @addr.include?(host.addr)

                if(@hosts.delete(host))
                    @count-=host.count
                end
                host
            end

            def select(&block)
                raise 'no block given' unless block

                s=@hosts.select{|c|
                    c.select(&block)
                }
                case s.size
                when 0
                    self if yield(self)
                when 1
                    s[0]
                else
                    self
                end
            end

            def descript(port=$stdout)
                bullet=''
                if(@hosts.size>1)
                    bullet='    '
                    super
                end
                @hosts.sort_by{|a| a.last }.each{|c|
                    port<< bullet
                    c.descript(port)
                }
            end
        end
        #
        # end of Blocker::Countor::Subnet
        #

        #
        # Blocker::Countor
        #
        def initialize
            @hosts={}
            @subnets={}
        end
        def reg(a,t,tag=nil)
            @hosts[a]||=Host.new(a)
            @hosts[a].count_up(t)
            @hosts[a].add_tag(tag)
        end
        def aggregate
            @subnets={}
            @hosts.values.each{|h|
                addr=h.addr.mask(AGGREGATE_MASK)
                @subnets[addr]||=
                    Subnet.new(h,AGGREGATE_MASK)
                @subnets[addr].add_host(h)
            }

            @subnets
        end
        def select(force_aggregate=nil,&block)
            raise 'no block given' unless block

            self.aggregate if force_aggregate || @subnets.empty?

            @subnets.values.map{|sn|
                sn.select(&block)
            }.compact
        end

        def [](x)
            addr=if(x.respond_to?(:addr))
                     x.addr
                 else
                     x
                 end
            @subnets[addr]||@hosts[addr]
        end
        def delete(x)
            addr=if(x.respond_to?(:addr))
                     x.addr
                 else
                     x
                 end
            if(@subnets[addr])
                @subnets[addr].hosts.each{|h|
                    @hosts.delete(h)
                }
                @subnets.delete(addr)
            else
                h=@hosts.delete(addr)
                sn=self.subnet(h)
                if(sn.hosts.size<=1)
                    @subnets.delete(sn.addr)
                else
                    sn.remove_host(h)
                end
            end
        end

        def subnet(x)
            addr=if(x.respond_to?(:addr))
                     x.addr
                 else
                     x
                 end
            p_addr=addr.mask(AGGREGATE_MASK)
            @subnets[p_addr] unless addr==p_addr
        end

        def descript(port=$stdout)
            @subnets.values.sort_by{|sn| sn.last}.each{|sn|
                sn.descript(port)
            }
        end
    end
    #
    # end of Blocker::Countor
    #

    #
    # DB entries
    #
    class Entry<Countor::Host
        @@now=Time.now
        def self.now=(x)
            @@now=x
        end
        def initialize(addr,
                       last=TIME_ORIGIN,
                       count=0,
                       status=:new,
                       remain=nil,
                       updated=nil)
            super(addr,last,count)
            @status=status
            @remain=remain||@count
            @updated=updated||@@now
        end
        attr_reader :status,:remain,:updated

        def begin_block
            @status=:blocked
            @remain=@count
            @updated=@@now
            self
        end

        def count_down(c)
            @updated=@@now
            @remain-=c
            if(@remain<=0)
                @remain=0
                @status=:expired
                self
            else
                nil
            end
        end

        def force_expire
            @updated=@@now
            @status=:force_expire
        end

        def expire?
            @status==:expired
        end

        def reblock(h)
            @updated=@@now
            @last=h.last
            @count+=h.count
            @remain=@count
            @status=:new if @status==:expired
            self
        end

        def descript(port=$stdout)
            port<< "#{@addr.to_s_with_mask}: #{@last.to_s} (#{@count})\n"<<
                "  [#{@status} (remain: #{remain}) #{@updated}]\n"
        end
    end
    #
    # end of Blocker::Entry
    #


    HALF_THRESHOLD=
        NUM_THRESHOLD>2 ? NUM_THRESHOLD/2 : 1
    def initialize(now=Time.now,
                   ignore_db=nil,
                   ignore_iptables_entry=nil)
        @now=now
        Entry.now=@now

        @countor=Countor.new

        @ignore_before=@now-INSPECT_SPAN
        @expire_at=@now-LOCKOUT_SPAN

        @records=[]
        _read_db unless ignore_db

        @iptables=[]
        _read_iptables unless ignore_iptables_entry
    end

    def reg(addr,timestamp,tag=nil)
        a=IPAddr.new(addr)

        if(tag==:__SYSTEM__)
            @iptables.push(Entry.new(a))
        else
            return if WHITE_LIST.find{|w| w.include?(a) }

            t=Time.parse(timestamp)
            @countor.reg(a,t,tag) if @ignore_before<t
        end
    end

    def update
        @countor.aggregate
        @records.each{|r|
            sn=@countor.subnet(r)
            h=@countor[r]
            if(sn &&
               sn.last>r.last &&
               sn.count>HALF_THRESHOLD)
                sn.count_up(r.last,r.count)
                r.force_expire
            elsif(h)
                r.reblock(h) if(h.last>r.last &&
                    h.count>HALF_THRESHOLD)
                @countor.delete(h)
            end
        }

        @countor.select{|h|
            h.count>NUM_THRESHOLD
        }.map{|h|
            #
            # re-aggregate a host that has numerous count with
            # other hosts those have few count
            #
            sn=@countor.subnet(h)
            if(sn && h.count*REAGGREGATE_THRESHOLD<sn.count)
                sn
            else
                h
            end
        }.uniq.each{|h|
            @records.push(Entry.new(h.addr,h.last,h.count))
        }
    end

    def run(dry=nil,&block)
        self.update

        buf=[]
        @records.delete_if{|r|
            case r.status
            when :new
                r.begin_block
                buf.push(['I',r])
                nil
            when :blocked
                if(@expire_at>r.updated)
                    r.count_down(NUM_THRESHOLD)

                    if(r.expire? &&
                       @iptables.find{|e| e.addr.include?(r.addr) })
                        buf.push(['D',r])
                    end
                elsif(!@iptables.find{|e| e.addr.include?(r.addr) })
                    buf.push(['I',r])
                end
                nil
            when :force_expire
                buf.push(['D',r])
            when :expired
                r.updated<@ignore_before
            end
        }

        #
        # store DB if NOT dry-run
        #
        _write_db unless dry

        buf.each{|(op,rec)|
            if(block)
                yield(op,rec,@now)
            else
                _exec_iptables(op,rec,@now,dry)
            end
        }
    end

    def descript(port=$stdout)
        port<< "DB:\n"
        @records.each{|r|
            r.descript(port)
        }
        port<< "\n"

        @countor.aggregate
        port<< "LOG:\n"
        @countor.descript(port)
        port<< "\n"

        port<< "----\n"
        self.run(true){|op,rec,timestamp|
            addr=rec.addr.to_s_with_mask

            $stdout<< [IPTABLES,
                "-#{op}",
                'INPUT',
                '-s',
                addr,
                '-j',
                IPTABLES_TARGET].join(' ')<< "\n"
        }

        port<< "----\n"
        @records.each{|r|
            r.descript(port)
        }
        port<< "\n\n"
    end

    private
    def _read_db
        if(File.exist?(DB))
            File.open(DB){|f|
                f.flock(File::LOCK_EX)
                @records=Marshal.load(f.read)
            }
        end
    end

    def _write_db
        File.open(DB,'w'){|f|
            f.flock(File::LOCK_EX)
            f<< Marshal.dump(@records)
        }
    end

    def _read_iptables
        @iptables.clear

        IO.popen([IPTABLES,'-L','INPUT','-n']){|io|
            io.each{|line|
                (target,prot,opt,src,dst,)=line.strip.split(/\s+/,6)
                if(target==IPTABLES_TARGET && prot==IPTABLES_PROT)
                    @iptables.push(Entry.new(IPAddr.new(src)))
                end
            }
        }
    end

    def _exec_iptables(op,rec,timestamp,dry)
        addr=rec.addr.to_s_with_mask

        cmd=[IPTABLES,
             "-#{op}",
             'INPUT',
             '-s',
             addr,
             '-j',
             IPTABLES_TARGET]

        if(defined?(REPORT_IPTABLES_ACTIION) &&
                REPORT_IPTABLES_ACTIION)
            $stderr<< "#{timestamp.to_s}: "
            if(op=='I')
                $stderr<< "block #{addr}. (#{rec.count})\n"
            else
                $stderr<< "#{addr} #{rec.status}\n"
            end
        end

        IO.popen(cmd,'r'){|io|
            $stderr<< io.read
        } unless dry
    end
end


blocker=Blocker.new(now,ignore_db,ignore_iptables_entry)

if(filter_mode)
    INSPECTOR[STDIN]||={}
    INSPECTOR.keys.each{|k|
        next if k==STDIN
        INSPECTOR[STDIN].merge!(INSPECTOR[k])
        INSPECTOR.delete(k)
    }
else
    INSPECTOR.delete(STDIN)
end

#
# inspect each log
#
INSPECTOR.each{|log_file,hooks|
    f=if(log_file==STDIN)
          STDIN
      else
          File.open(log_file)
      end

    f.each{|line|
        hooks.each{|tag,(re,addrhook)|
            m=line.match(re)
            if(m)
                addr=addrhook.call(line,m)
                if(addr)
                    blocker.reg(addr,line,tag) # Time#parse will be parse log
                else
                    warn 'SKIP: could not find IP addr'
                end
            end
        }
    }
    f.close unless f==STDIN
}

if(show_status)
    blocker.descript
elsif(filter_mode)
    blocker.run(dry_run){|op,rec,ts|
        $stdout<< FILTER_OUTPUT.call(op,rec,ts)<< "\n"
    }
else
    blocker.run(dry_run)
end
